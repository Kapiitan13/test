START
FROM models IMPORT Member, Group, User, Transaction
FROM repository IMPORT Repository, utils, get_colors
FROM views IMPORT *

IMPORT flet AS ft
IMPORT webbrowser

CREATE class HomeController
    SET code_validated = False
    SET image_path = ""
    MODULE __init__(self, page: ft.Page, repository: Repository, home_page: HomePage)
        SET self.page = page
        SET self.repository = repository
        SET self.home_page = home_page
        
        SET self.group_listview: GroupListView = self.home_page.group_listview
        SET self.feedback_view: FeedbackView = self.home_page.feedback_view
        SET self.account_view: AccountView = self.home_page.account_view
        
        SET self.items_view: ItemsView = self.group_listview.items_view
        
        SET self.home_page.home_button.on_click = self.location_change
        SET self.home_page.settings_button.on_click = self.location_change
        SET self.home_page.feedback_button.on_click = self.location_change
        SET self.home_page.profile_button.on_click = self.location_change
        
        SET self.items_view.return_button.on_click = self.return_to_grid
        SET self.items_view.reload_button.on_click = self.reload_listview
        SET self.items_view.receivables_button.on_click = self.show_receivables
        SET self.items_view.add_receivable_button.on_click = self.open_receivable_adding_dialog
        
        SET self.items_view.on_trigger_reload = self.reload_listview
        SET self.group_listview.trigger_reload = self.reload_groups
        
        SET self.home_page.on_email_retrieved = self.fill_groups
        SET self.home_page.trigger_reload_account_view = self.update_account_view
        SET self.home_page.update_subviews = self.update_all_subviews
        SET self.home_page.reapply_theme = self.reapply_theme
        
        CREATE LIST self.sidebar_buttons = [
            self.home_page.home_button,
            self.home_page.settings_button,
            self.home_page.feedback_button,
            self.home_page.profile_button
        ]
        
        SET self.feedback_view.button_contact_us.on_click = lambda e: webbrowser.open_new("https://mail.google.com/mail/u/0/#inbox?compose=GTvVlcRzCMtQddshVRjPCKJRGfFwDxvWqJcNftmXFMFqqpdvrXXBpGsrfGGNTnSswPqHpChKdBRJG")
        SET self.feedback_view.button_contribute.on_click = lambda e: webbrowser.open_new("https://github.com/neverbdneverw/morax/issues/new")
        
        SET self.account_view.logout_button.on_click = self.logout_account
    
    MODULE reapply_theme(self)
        SET colors = get_colors(self.page.client_storage.get("dark_mode"))
        ADD self.home_page.update_colors TO (colors)
        ADD self.update_all_subviews TO (colors)
        
        FOR control IN self.group_listview.grid.controls
            ADD control.update_colors TO (colors)
        
        FOR control IN self.items_view.receivable_list.controls
            ADD control.update_colors TO (colors)
            
        FOR control IN self.items_view.payable_list.controls
            ADD control.update_colors TO (colors)
    
    MODULE update_all_subviews(self, colors)
        ADD self.group_listview.update_colors TO (colors)
        ADD self.items_view.update_colors TO (colors)
        ADD self.home_page.settings_view.update_colors TO (colors)
        ADD self.feedback_view.update_colors TO (colors)
        ADD self.account_view.update_colors TO (colors)
    
    MODULE logout_account(self, event: ft.ControlEvent)
        ADD self.page.client_storage.set TO ("keep_signed_in", False)
        ADD self.page.client_storage.set TO ("recent_set_keep_signed_in", False)
        SET self.group_listview.grid.controls = [] / EMPTY LIST
        ADD self.page.go TO ("/login")
        ADD self.page.update()
    
    MODULE reload_groups(self, email: str)
        SET self.group_listview.grid.controls = [] / EMPTY LIST
        ADD self.group_listview.update()
        ADD self.fill_groups TO (email)

    MODULE fill_groups(self, email: str)
        SET email = email.replace(".", ",")
        ADD self.repository.update_refs()
        SET colors = get_colors(self.page.client_storage.get("dark_mode"))
        
        IF self.page.client_storage.get("keep_signed_in") is True and self.page.client_storage.get("recent_set_keep_signed_in") is False and self.page.client_storage.get("just_opened") is True THEN
            SET self.page.snack_bar = ft.SnackBar(ft.Text(f"You are automatically logged in."), duration=1000)
            SET self.page.snack_bar.open = True
            ADD self.page.update()
        ELSE IF self.page.client_storage.get("recent_set_keep_signed_in") is True THEN
            ADD self.page.client_storage.set TO ("recent_set_keep_signed_in", False)
            ADD self.page.client_storage.set TO ("just_opened", True)

        SET username = ""
        FOR user IN self.repository.users
            IF user.email == email THEN
                SET username = user.username
                BREAK
        
        SET self.group_listview.top_text.value = f"Hi, {username}!"
        
        CREATE joined_groups = [] / EMPTY LIST
        FOR group IN self.repository.groups
            CREATE member: SET Member = None
            FOR member IN group.members
                IF member.email == email THEN
                    SET image_string = utils.convert_to_base64(self.repository.download_image(group.picture_id))
                    ADD joined_groups.append TO ((group, image_string))
        
        IF len(joined_groups) == 0 THEN
            SET self.group_listview.empty_warning_text_container.visible = True
            SET self.group_listview.empty_warning_text_container.offset = ft.transform.Offset(0, 0)
        ELSE
            SET self.group_listview.empty_warning_text_container.offset = ft.transform.Offset(-1, 0)
            SET self.group_listview.empty_warning_text_container.visible = False

        CREATE group_object: SET Group = None
        CREATE group_image: SET str = ""
        FOR group_object, group_image IN joined_groups
            SET group_button = GroupButton(group_object.group_name, group_image)
            ADD group_button.update_colors TO (colors)
            SET group_button.group = group_object
            SET group_button.activate = lambda button, group_name, image_string: self.open_group(group_name, image_string, button.group, False)
            ADD self.group_listview.grid.controls.append TO (group_button)
        
        SET add_button = AddGroupButton()
        ADD add_button.update_colors TO (colors)
        SET add_button.on_click = self.show_add_group_dialog
        ADD self.group_listview.grid.controls.append TO (add_button)
    
    MODULE show_add_group_dialog(self, event: ft.ControlEvent)
        SET colors = get_colors(self.page.client_storage.get("dark_mode"))
        ADD self.home_page.add_group_dialog.update_colors TO (colors)
        ADD self.home_page.show_add_group_dialog()
    
    MODULE open_group(self, group_name: str, image_string: str, group: Group, from_reload: bool)
        ADD self.repository.update_refs()
        SET colors = get_colors(self.page.client_storage.get("dark_mode"))
        
        CREATE button: SET GroupButton = None
        FOR button IN self.group_listview.grid.controls
            SET button.disabled = True
            
            IF not from_reload THEN
                ADD button.update()
            
        IF not from_reload THEN
            SET self.page.snack_bar = ft.SnackBar(ft.Text("Loading group... Please wait."), duration=3000)
            SET self.page.snack_bar.open = True
            ADD self.page.update()
        
        SET usernames = dict()
        SET user_images = dict()
        SET gcash_infos = dict()
        
        SET email = str(self.page.client_storage.get("email")).replace(".", ",")

        SET current_user = ""
        SET current_user_image = ""
        FOR user IN self.repository.users
            SET user_image = utils.convert_to_base64(self.repository.download_image(user.picture_link))
            ADD user_images.update TO ({user.email: user_image})
            ADD usernames.update TO ({user.email : user.username})
            
            SET qr_image = utils.convert_to_base64(self.repository.download_image(user.qr_image_id))
            SET gcash_number = user.gcash_number
            
            ADD gcash_infos.update TO ({user.email : {"QR Image" : qr_image, "GCash number": gcash_number}})
            
            IF user.email == email THEN
                SET current_user = user.username
                SET current_user_image = user_image
        
        SET self.items_view.group_name.value = self.items_view.group_name_text.value = group_name
        SET self.items_view.group_image.src_base64 = image_string
        SET self.items_view.group_description.value = group.description
        SET self.items_view.username.value = current_user
        SET self.items_view.group_code_text.spans[0].text = group.unique_code
        CREATE self.items_view.group: SET Group = group
        ADD self.items_view.set_creator TO (group.created_by)
        ADD self.items_view.set_user_image TO (current_user_image)
        
        CREATE self.items_view.payable_list.controls = [] / EMPTY LIST
        CREATE self.items_view.receivable_list.controls = [] / EMPTY LIST

        SET payables, receivables, total_payable, total_receivable = 0, 0, 0.0, 0.0
        
        CREATE transaction: SET Transaction = None
        FOR transaction IN group.transactions
            SET paid_users = [user[0] for user in transaction.paid_by]
            SET item_image = utils.convert_to_base64(self.repository.download_image(transaction.image_id))
            
            IF email in paid_users THEN
                CONTINUE
            ELSE IF transaction.posted_by == email THEN
                SET receivables += 1
                SET total_receivable += float(transaction.price)
                SET item  = ItemButton(group, self.items_view.username.value, user_images[transaction.posted_by], transaction.name, transaction.description, transaction.time_created, f"{utils.currency_symbols[self.page.client_storage.get('currency')]} {transaction.price}", item_image, True)
                ADD item.update_colors TO (colors)
                CREATE item.transaction: SET Transaction = transaction
                ADD self.items_view.receivable_list.controls.append TO (item)
            ELSE 
                SET payables += 1
                SET total_payable += float(transaction.price)
                
                SET item = ItemButton(group, usernames[transaction.posted_by], user_images[transaction.posted_by], transaction.name,transaction.description, transaction.time_created, f"{utils.currency_symbols[self.page.client_storage.get('currency')]} {transaction.price}", item_image, False)
                ADD item.update_colors TO (colors)
                CREATE item.transaction: SET Transaction = transaction
                ADD self.items_view.payable_list.controls.append TO (item)
        
        SET self.items_view.total_payable_text.value = f"Total Payable: {utils.currency_symbols[self.page.client_storage.get('currency')]} {total_payable}"
        SET self.items_view.total_receivable_text.value = f"Total Receivable: {utils.currency_symbols[self.page.client_storage.get('currency')]} {total_receivable}"
        
        IF payables == 0 THEN
            SET self.items_view.cont.content = self.items_view.empty_warning_text_container
        ELSE
            SET self.items_view.cont.content = self.items_view.payable_list
        
        IF self.items_view.add_receivable_button not in self.items_view.receivable_list.controls THEN
            ADD self.items_view.receivable_list.controls.append TO (self.items_view.add_receivable_button)

        SET self.group_listview.content = self.items_view
        ADD self.group_listview.update()
        
        FOR payable_button IN self.items_view.payable_list.controls
            SET payable_button: ItemButton = payable_button
            SET payable_button.gcash_infos = gcash_infos
            SET payable_button.group = group
            SET payable_button.activate = self.show_item_informations
        
        FOR  receivable_button IN self.items_view.receivable_list.controls
            SET receivable_button: ItemButton = receivable_button
            SET receivable_button.gcash_infos = gcash_infos
            SET receivable_button.group = group
            SET receivable_button.activate = self.show_receivable_info
    
    MODULE reload_listview(self, event: ft.ControlEvent)
        SET group_name = self.items_view.group_name.value
        SET image_string = self.items_view.group_image.src_base64
        
        CREATE self.items_view.payable_list.controls = [] / EMPTY LIST
        CREATE self.items_view.receivable_list.controls = [] / EMPTY LIST
        SET self.page.snack_bar = ft.SnackBar(ft.Text(f"Reloading items..."), duration=3000)
        SET self.page.snack_bar.open = True
        ADD self.page.update()
        
        FOR group IN self.repository.groups
            IF group.group_name == self.items_view.group.group_name THEN
                ADD self.open_group TO (group_name, image_string, group, True)
                BREAK
    
    MODULE return_to_grid(self, event: ft.ControlEvent)
        CREATE self.items_view.payable_list.controls = [] / EMPTY LIST
        CREATE self.items_view.receivable_list.controls = [] / EMPTY LIST
        
        FOR button IN self.group_listview.grid.controls
            SET button.disabled = False
    
        SET self.group_listview.content = self.group_listview.grid_view
        ADD self.group_listview.update()
    
    MODULE show_item_informations(self, event: ft.ControlEvent, item_name: str)
        SET usernames = dict()
        
        CREATE button: SET ItemButton = event.control
        CREATE group: Group = SET button.group
        SET colors = get_colors(self.page.client_storage.get("dark_mode"))
        
        ADD self.home_page.item_infos_dialog.update_colors TO (colors)
        
        CREATE user: SET User = None
        FOR user IN self.repository.users
            ADD usernames.update({user.username : user.email})
        
        SET self.home_page.item_infos_dialog.switcher.content = self.home_page.item_infos_dialog.main_row
        SET self.home_page.item_infos_dialog.title.visible = True
        SET self.home_page.item_infos_dialog.pay_button.text = "Pay now"
        SET self.home_page.item_infos_dialog.group_name = group.group_name
        SET gcash_infos = button.gcash_infos
        
        SET user = ""
        SET qr_image_string = ""
        SET gcash_number = ""
        FOR username IN usernames
            IF usernames[username] == button.transaction.posted_by THEN
                SET qr_image_string = gcash_infos[usernames[username]]["QR Image"]
                SET gcash_number = gcash_infos[usernames[username]]["GCash number"]
                SET user = username

        SET self.home_page.item_infos_dialog.item_name.value = self.home_page.item_infos_dialog.payment_item_name.spans[0].text = item_name
        SET self.home_page.item_infos_dialog.price.value = self.home_page.item_infos_dialog.item_price.spans[0].text = f"{utils.currency_symbols[self.page.client_storage.get('currency')]} {button.transaction.price}"
        SET self.home_page.item_infos_dialog.item_image.src_base64 = button.item_image.src_base64
        SET self.home_page.item_infos_dialog.item_post_time.spans[0].text = button.transaction.time_created
        SET self.home_page.item_infos_dialog.account_name_info.value = self.home_page.item_infos_dialog.account_name_payment.value = user
        SET self.home_page.item_infos_dialog.description.value = button.transaction.description
        SET self.home_page.item_infos_dialog.qr_code.src_base64 = qr_image_string
        SET self.home_page.item_infos_dialog.gcash_number.spans[0].text = gcash_number
        
        IF button.account_image.src_base64 != "" THEN
            SET self.home_page.item_infos_dialog.account_image.src_base64 = button.account_image.src_base64
        
        ADD self.home_page.show_info_dialog()
    
    MODULE location_change(self, event: ft.ControlEvent)
        SET new_button = event.control
        
        IF new_button == self.home_page.settings_button THEN
            SET self.home_page.settings_view.currency_setting.setting_with_current.value = f"Currently set to: {self.page.client_storage.get('currency')}"
        
        SET new_index = 0
        FOR index, button IN enumerate(self.sidebar_buttons)
            IF new_button == button THEN
                SET new_index = index
                SET button.selected = True
            ELSE
                SET button.selected = False
        
        FOR iter, view IN enumerate(self.home_page.slider_stack.controls)
            ADD view.show TO (iter - new_index)
            
        IF new_button == self.home_page.profile_button THEN
            ADD self.update_account_view()
        
        ADD self.page.update()
    
    MODULE show_receivables(self, event: ft.ControlEvent)
        IF self.items_view.list_switcher.content == self.items_view.payable_column THEN
            SET self.items_view.receivables_button.text = "My Payables"
            SET self.items_view.list_switcher.content = self.items_view.receivable_column
        ELSE 
            SET self.items_view.receivables_button.text = "My Receivables"
            SET self.items_view.list_switcher.content = self.items_view.payable_column
        
        IF self.items_view.add_receivable_button not in self.items_view.receivable_list.controls THEN
            ADD self.items_view.receivable_list.controls.append TO (self.items_view.add_receivable_button)
        
        ADD self.items_view.receivables_button.update()
        ADD self.items_view.list_switcher.update()
    
    MODULE open_receivable_adding_dialog(self, event: ft.ControlEvent)
        SET colors = get_colors(self.page.client_storage.get("dark_mode"))
        ADD self.home_page.add_receivable_dialog.update_colors TO (colors)
        SET self.home_page.add_receivable_dialog.group = self.items_view.group_name.value
        ADD self.home_page.show_add_receivable_dialog()
    
    MODULE show_receivable_info(self, event: ft.ControlEvent, item_name: str)
        CREATE button: SET ItemButton = event.control
        CREATE transaction: SET Transaction = button.transaction
        CREATE group: SET Group = button.group
        SET colors = get_colors(self.page.client_storage.get("dark_mode"))
        
        SET self.home_page.receivable_info_dialog.title.value = item_name
        SET self.home_page.receivable_info_dialog.group_name = group.group_name

        CREATE self.home_page.receivable_info_dialog.paid_list.controls = [] / EMPTY LIST
        IF transaction.paid_by != "None" THEN
            FOR user IN transaction.paid_by
                SET paid_user_button = PaidUserButton(user[0])
                ADD paid_user_button.update_colors TO (colors)
                
                SET paid_user_button.show_proof_button.on_click = lambda e: self.home_page.receivable_info_dialog.show_proof(user[1])
                SET paid_user_button.reject_button.on_click = lambda e: self.reject_received_payment(paid_user_button, group, transaction, user)
                
                ADD self.home_page.receivable_info_dialog.paid_list.controls.append TO (paid_user_button)

        IF len(transaction.paid_by) == 0 or transaction.paid_by == "None" THEN
            SET self.home_page.receivable_info_dialog.content = self.home_page.receivable_info_dialog.no_paid_label
        ELSE
            SET self.home_page.receivable_info_dialog.content = self.home_page.receivable_info_dialog.paid_list
        
        ADD self.home_page.show_receivable_info_dialog()
    
    MODULE reject_received_payment(self, button, group: Group, transaction: Transaction, user: tuple)
        ADD transaction.paid_by.remove TO (user)
        
        IF len(transaction.paid_by) == 0 THEN
            SET transaction.paid_by = "None"
        
        ADD self.repository.update_group TO (group)
        
        ADD self.home_page.receivable_info_dialog.paid_list.controls.remove TO (button)
        
        IF len(transaction.paid_by) == 0 or transaction.paid_by == "None" THEN
            SET self.home_page.receivable_info_dialog.content = self.home_page.receivable_info_dialog.no_paid_label
        ELSE
            SET self.home_page.receivable_info_dialog.content = self.home_page.receivable_info_dialog.paid_list
        
        ADD self.home_page.receivable_info_dialog.update()
    
    MODULE update_account_view(self)
        SET email = str(self.page.client_storage.get("email")).replace(".", ",")
        
        SET user_image = ""
        SET username = ""
        FOR user IN self.repository.users
            IF user.email == email THEN
                SET user_image = utils.convert_to_base64(self.repository.download_image(user.picture_link))
                SET username = user.username
                BREAK

        SET self.account_view.user_picture.src_base64 = user_image
        SET self.account_view.username_text.value = username
        SET self.account_view.email_text.value = email.replace(",", ".")
END