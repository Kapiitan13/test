START
FROM models IMPORT Group, Member
FROM repository IMPORT Repository, utils
FROM views IMPORT AddDialog, HomePage

FROM PIL IMPORT Image

IMPORT flet AS ft
IMPORT io
IMPORT base64

CREATE class AddDialogController
    SET code_validated = False
   MODULE __init__(self, page: ft.Page, repository: Repository, home_page: HomePage)
        SET self.page = page
        SET self.repository = repository
        SET self.home_page = home_page
        CREATE self.add_group_dialog: SET AddDialog = home_page.add_group_dialog
        
        SET self.file_picker = ft.FilePicker()
        SET self.file_picker.on_result = self.set_image
        ADD self.page.overlay.append TO (self.file_picker)
        ADD self.page.update()
    
        SET self.add_group_dialog.group_code_textfield.on_change = self.validate_group_code
        SET self.add_group_dialog.create_new_button.on_click = self.create_new
        SET self.add_group_dialog.join_button.on_click = self.join_group
        SET self.add_group_dialog.close_button.on_click = self.home_page.close_dialog
        SET self.add_group_dialog.group_name_textfield.on_change = self.validate_creation_params
        SET self.add_group_dialog.group_desc_textfield.on_change = self.validate_creation_params
        SET self.add_group_dialog.check_if_exists_button.on_click = self.check_if_code_exists
        SET self.add_group_dialog.image_upload_button.on_click = self.open_chooser
    
    MODULE validate_group_code(self, event: ft.ControlEvent)
        IF len(self.add_group_dialog.get_group_code_entry()) == 8 THEN
            SET self.add_group_dialog.check_if_exists_button.disabled = False
        ELSE
            SET self.add_group_dialog.check_if_exists_button.disabled = True
        ADD self.add_group_dialog.update()
    
    MODULE create_new(self, event)
        IF self.add_group_dialog.switcher.content == self.add_group_dialog.join_column THEN
            ADD self.add_group_dialog.switch_to_creation()
            SET self.add_group_dialog.join_button.disabled = False
            
            IF self.add_group_dialog.get_created_group_name() == "" and self.add_group_dialog.get_created_group_desc() == "" THEN
                SET self.add_group_dialog.create_new_button.disabled = True
            
            ADD self.page.update()
        ELSE
            IF self.add_group_dialog.get_created_group_name() != "" and self.add_group_dialog.get_created_group_desc() != "" THEN
                CREATE email: DECLARE str = self.page.client_storage.get("email")
                
                SET creator = ""
                FOR user IN self.repository.users
                    IF user.email == email.replace(".", ".") THEN
                        SET creator = user.username
                        BREAK
                    
                SET image_bytes = io.BytesIO()
                SET image = Image.open(self.image_path).convert("RGBA")
                SET image = image.resize((200, 200))
                ADD image.save TO (image_bytes, format="PNG")
                
                SET empty_list = list()
                SET unique_code = utils.generate_unique_code()
                
                SET group_image_id = self.repository.upload_image(f"{self.add_group_dialog.get_created_group_name()}.png", image_bytes)
                
                SET new_group = Group(
                    group_name=self.add_group_dialog.get_created_group_name(),
                    created_by=creator,
                    description=self.add_group_dialog.get_created_group_desc(),
                    members=[Member(creator, email)],
                    picture_id=group_image_id,
                    unique_code=unique_code,
                    transactions=empty_list
                )
                
                ADD self.repository.update_group TO (new_group)
                ADD self.page.client_storage.set TO ("just_opened", False)
                ADD self.home_page.group_listview.trigger_reload TO (email)
                ADD self.home_page.close_dialog TO (None)
                SET self.new_image_string == ""
                
                ADD self.page.update()
    
    MODULE join_group(self, event)
        IF self.add_group_dialog.switcher.content == self.add_group_dialog.creation_row THEN
            ADD self.add_group_dialog.switch_to_joining()
            SET self.add_group_dialog.create_new_button.disabled = False
            
            IF self.code_validated THEN
                SET self.add_group_dialog.join_button.disabled = False
            ELSE
                SET self.add_group_dialog.join_button.disabled = True
            
            ADD self.page.update()
        
        ELSE
            IF self.code_validated THEN
                SET email = str(self.page.client_storage.get("email")).replace(".", ",")
                
                SET username = ""
                FOR user in self.repository.users
                    IF user.email == email THEN
                        SET username = user.username
                
                FOR group IN self.repository.groups
                    IF group.unique_code == self.add_group_dialog.get_group_code_entry() THEN
                        ADD group.members.append TO (Member(username, email))

                        ADD self.repository.update_group TO (group)
                
                        ADD self.page.client_storage.set TO ("just_opened", False)
                        ADD self.home_page.group_listview.trigger_reload TO (email)
                        ADD self.home_page.close_dialog TO (None)
                        ADD self.page.update()
    
    MODULE validate_creation_params(self, event)
        IF self.add_group_dialog.get_created_group_desc() != "" and self.add_group_dialog.get_created_group_name() != "" THEN
            SET self.add_group_dialog.create_new_button.disabled = False
        ELSE
            SET self.add_group_dialog.create_new_button.disabled = True

        ADD self.page.update()
    
    MODULE check_if_code_exists(self, event)
        SET code = self.add_group_dialog.get_group_code_entry()
        IF code != "" THEN
            SET exists = False
            FOR group IN self.repository.groups
                IF code == group.unique_code  THEN
                    SET exists = True
                    BREAK
            
            IF exists THEN
                SET self.page.snack_bar = ft.SnackBar(ft.Text("The group code is valid. You may now join..."), duration=3000)
                SET self.page.snack_bar.open = True
                ADD self.page.update()
                SET self.code_validated = True
                SET self.add_group_dialog.join_button.disabled = False
            ELSE
                SET self.page.snack_bar = ft.SnackBar(ft.Text("The group code is invalid. Please try again..."), duration=3000)
                SET self.page.snack_bar.open = True
                ADD self.page.update()
                SET self.code_validated = False
                SET self.add_group_dialog.join_button.disabled = True
            
            ADD self.page.update()
    
    MODULE open_chooser(self, event)
        ADD self.file_picker.pick_files TO ("Choose Group Image", allowed_extensions = ["png", "jpg", "jpeg", "PNG", "JPG"], file_type = ft.FilePickerFileType.CUSTOM)
    
    MODULE set_image(self, event: ft.FilePickerResultEvent)
        IF event.files is not None THEN
            SET self.image_path = event.files[0].path
            SET image = Image.open(self.image_path).convert("RGBA")
            SET pil_img = image.resize((200, 200))
            SET buff = io.BytesIO()
            ADD pil_img.save TO (buff, format="PNG")
            
            SET self.new_image_string = base64.b64encode(buff.getvalue()).decode("utf-8")
            SET self.add_group_dialog.image_preview.src_base64 = self.new_image_string
            ADD self.add_group_dialog.image_preview.update()
        ELSE
            SET self.image_path = ""
END